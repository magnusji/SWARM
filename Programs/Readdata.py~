from numpy import *
from matplotlib.pyplot import *
import math
from mpl_toolkits.basemap import Basemap

class Readdata():
    def __init__(self,filename):
        self.infile = open(filename,'r'); #self.infile.readlines();

    def set_var(self): 
        self.Date = []; self.Latitude = []; self.Longitude = []; self.electrondensity = []
        for line in self.infile:
            words = line.split()
            self.Date.append(words[1]); self.Latitude.append(words[4]); self.Longitude.append(words[5]); self.electrondensity.append(words[10]);
    
    def distance(self):
        self.Svalbardlat = 78.15; self.Svalbardlong = math.radians(16.04); 
        lat1 = math.radians(self.Svalbardlat); lon1 = math.radians(self.Svalbardlong)
	R = 6371000
	self.distances = []
        self.indices = []
        self.electron = []
        count = 0
        count2 = 0
        for i in range(len(self.Latitude)):
		self.Latitude[i] = float(self.Latitude[i])
		self.Longitude[i] = float(self.Longitude[i])
        	lat2 = math.radians(self.Latitude[i])
                lon2 = math.radians(self.Longitude[i])
                dlat = lat2-lat1
                dlon = lon2-lon1

                a = math.sin(dlat/2.0)**2 + math.cos(lat1)* math.cos(lat2)*math.sin(dlon/2.0)**2
                c = 2.0*math.atan2(math.sqrt(a), math.sqrt(1-a))
                distance = R*c
                count2 += 1
                if distance<=300000.0:
                    self.distances.append(distance)
                    self.indices.append(i)
                    self.electron.append(float(self.electrondensity[i]))
                    count += 1

        print ( self.distances, count, count2)
        figure()
        plot(self.electron)
        


            
        




a = Readdata('./Data/SW_PREL_EFIA_LP_1B_20131229T000000_20131229T235959_0102.txt') ;  a.set_var(); a.distance()

map = Basemap(llcrnrlon=-100.,llcrnrlat=0.,urcrnrlon=-40.,urcrnrlat=57.,
            projection='lcc',lat_1=70.,lat_2=90.,lon_0=0.,
            resolution ='l',area_thresh=1000.)

map.drawcoastlines(linewidth=0.25)
map.drawcountries(linewidth=0.25)
map.fillcontinents(color='coral',lake_color='aqua')
# draw the edge of the map projection region (the projection limb)
map.drawmapboundary(fill_color='aqua')
# draw lat/lon grid lines every 30 degrees.
map.drawmeridians(np.arange(0,360,30))
map.drawparallels(np.arange(-90,90,30))

#plot(a.Longitude,a.Latitude, 'b-', 16.04,78.15, 'r*')
show()                        

